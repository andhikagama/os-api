// Code generated by MockGen. DO NOT EDIT.
// Source: domain/user/repository/base.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	reflect "reflect"

	dao "github.com/andhikagama/os-api/model/dao"
	utils "github.com/andhikagama/os-api/shared/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx *utils.Context, request dao.User) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, request)
}

// GetByPhonePassword mocks base method.
func (m *MockRepository) GetByPhonePassword(ctx *utils.Context, phone, password string) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhonePassword", ctx, phone, password)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhonePassword indicates an expected call of GetByPhonePassword.
func (mr *MockRepositoryMockRecorder) GetByPhonePassword(ctx, phone, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhonePassword", reflect.TypeOf((*MockRepository)(nil).GetByPhonePassword), ctx, phone, password)
}

// UpdateByID mocks base method.
func (m *MockRepository) UpdateByID(ctx *utils.Context, id uint64, request map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockRepositoryMockRecorder) UpdateByID(ctx, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockRepository)(nil).UpdateByID), ctx, id, request)
}
