// Code generated by MockGen. DO NOT EDIT.
// Source: domain/inventory/repository/base.go

// Package mock_inventory is a generated GoMock package.
package mock_inventory

import (
	reflect "reflect"

	dao "github.com/andhikagama/os-api/model/dao"
	inventory "github.com/andhikagama/os-api/model/dto/inventory"
	utils "github.com/andhikagama/os-api/shared/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAllPaginated mocks base method.
func (m *MockRepository) GetAllPaginated(ctx *utils.Context, paginatedRequest *inventory.PaginatedRequest) (dao.Inventories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaginated", ctx, paginatedRequest)
	ret0, _ := ret[0].(dao.Inventories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaginated indicates an expected call of GetAllPaginated.
func (mr *MockRepositoryMockRecorder) GetAllPaginated(ctx, paginatedRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaginated", reflect.TypeOf((*MockRepository)(nil).GetAllPaginated), ctx, paginatedRequest)
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(ctx *utils.Context, id uint64) (dao.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(dao.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), ctx, id)
}

// UpdateByID mocks base method.
func (m *MockRepository) UpdateByID(ctx *utils.Context, id uint64, request map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockRepositoryMockRecorder) UpdateByID(ctx, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockRepository)(nil).UpdateByID), ctx, id, request)
}
